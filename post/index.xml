<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on djhworld.github.io</title>
    <link>https://djhworld.github.io/post/</link>
    <description>Recent content in Posts on djhworld.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <managingEditor>your@email.com (Daniel Harper)</managingEditor>
    <webMaster>your@email.com (Daniel Harper)</webMaster>
    <lastBuildDate>Sat, 27 Jan 2018 10:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://djhworld.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Running Go AWS Lambda functions locally</title>
      <link>https://djhworld.github.io/post/2018/01/27/running-go-aws-lambda-functions-locally/</link>
      <pubDate>Sat, 27 Jan 2018 10:00:00 +0000</pubDate>
      <author>your@email.com (Daniel Harper)</author>
      <guid>https://djhworld.github.io/post/2018/01/27/running-go-aws-lambda-functions-locally/</guid>
      <description>AWS recently announced Go support for Lambda, giving developers more choice over how their functions are written.
In an attempt to kick the tires of the new runtime, I found myself rummaging around the open source library required when writing Lambda functions in Go, and was delighted to find a glimpse into what happens when your function is invoked. This post is a brief tour of what I’ve gathered, and describes a simple way of invoking your function in a local environment.</description>
    </item>
    
  </channel>
</rss>