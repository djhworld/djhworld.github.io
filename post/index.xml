<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on djhworld</title>
    <link>https://djharper.dev/post/</link>
    <description>Recent content in Posts on djhworld</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sat, 25 Jul 2020 09:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://djharper.dev/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Moving my blog away from Github Pages</title>
      <link>https://djharper.dev/post/2020/07/25/moving-my-blog-away-from-github-pages/</link>
      <pubDate>Sat, 25 Jul 2020 09:00:00 +0000</pubDate>
      
      <guid>https://djharper.dev/post/2020/07/25/moving-my-blog-away-from-github-pages/</guid>
      <description>I&amp;rsquo;ve moved my blog away from github pages to its own domain djharper.dev and hosted the content elsewhere.
While github does support custom domains, implementing this now would cause the existing domain (djhworld.github.io) to render a 404 rather than a redirect, meaning existing links would suddenly become broken!
To combat this I&amp;rsquo;ve implemented meta-refresh and canonical links as a poor mans substitute for a 301 and no further updates will be posted to this URL.</description>
    </item>
    
    <item>
      <title>Running Linux on my Macbook</title>
      <link>https://djharper.dev/post/2020/06/07/running-linux-on-my-macbook/</link>
      <pubDate>Sun, 07 Jun 2020 09:00:00 +0000</pubDate>
      
      <guid>https://djharper.dev/post/2020/06/07/running-linux-on-my-macbook/</guid>
      <description>Obligatory desktop shot with nothing on it  This is another one of those posts, the one&amp;rsquo;s where Linux desktop apologists have the urge to justify to the world why they do things.
So here we go, a few weeks ago I installed Fedora 32 on my Macbook Pro (early 2015 model). In this post I hope to document the pitfalls, traps and joyous moments I found along the way, complete with the annoyances that I&amp;rsquo;ve come to tolerate.</description>
    </item>
    
    <item>
      <title>I don&#39;t know how CPUs work so I simulated one in code</title>
      <link>https://djharper.dev/post/2019/05/21/i-dont-know-how-cpus-work-so-i-simulated-one-in-code/</link>
      <pubDate>Tue, 21 May 2019 09:00:00 +0000</pubDate>
      
      <guid>https://djharper.dev/post/2019/05/21/i-dont-know-how-cpus-work-so-i-simulated-one-in-code/</guid>
      <description>A few months ago it dawned on me that I didn&amp;rsquo;t really understand how computers work under the hood. I still don&amp;rsquo;t understand how modern computers work.
However, after making my way through But How Do It Know? by J. Clark Scott, a book which describes the bits of a simple 8-bit computer from the NAND gates, through to the registers, RAM, bits of the CPU, ALU and I/O, I got a hankering to implement it in code.</description>
    </item>
    
    <item>
      <title>Reed Solomon codes are cool</title>
      <link>https://djharper.dev/post/2019/02/24/reed-solomon-codes-are-cool/</link>
      <pubDate>Sun, 24 Feb 2019 09:00:00 +0000</pubDate>
      
      <guid>https://djharper.dev/post/2019/02/24/reed-solomon-codes-are-cool/</guid>
      <description>Imagine wending your way through a great book on your e-reader, the world melting away, and suddenly everything comes crashing back to reality with an apologetic Sorry! Chapter 20 corrupted! message.
A few tired cells of the flash storage gave up the ghost overnight and corrupted your book.
Wouldn&amp;rsquo;t it be great if your device didn&amp;rsquo;t complain about its innards, and recovered from the problem itself?</description>
    </item>
    
    <item>
      <title>I ported my Gameboy Color emulator to WebAssembly</title>
      <link>https://djharper.dev/post/2018/09/21/i-ported-my-gameboy-color-emulator-to-webassembly/</link>
      <pubDate>Fri, 21 Sep 2018 09:00:00 +0000</pubDate>
      
      <guid>https://djharper.dev/post/2018/09/21/i-ported-my-gameboy-color-emulator-to-webassembly/</guid>
      <description>Around five years ago I wrote a Gameboy Color emulator in Go. It was a very frustrating, but rewarding experience that I&amp;rsquo;ve been dining out on in job interviews ever since.
However, as the passage of time progressed, it landed on the pile of mostly-done-but-not-finished projects and left largely abandoned. One might generously say, on hiatus. Well, until very recently that is.
  That 5 year gap   You see, a few weeks ago Go 1.</description>
    </item>
    
    <item>
      <title>I thought I found a browser security bug</title>
      <link>https://djharper.dev/post/2018/08/12/i-thought-i-found-a-browser-security-bug/</link>
      <pubDate>Sun, 12 Aug 2018 09:00:00 +0000</pubDate>
      
      <guid>https://djharper.dev/post/2018/08/12/i-thought-i-found-a-browser-security-bug/</guid>
      <description>A few weeks ago I thought I&amp;rsquo;d stumbled across something really bad when just casually browsing the web. It all started on a financial information website, upon clicking a link, the page partially loaded some of its content, then, without warning, redirected the browser to a completely different domain with some weird spam/search engine content on it, from a known domain squatter.
Strange&amp;hellip;
After refreshing a few times, it was still doing it.</description>
    </item>
    
    <item>
      <title>Using HyperLogLog in production, a retrospective</title>
      <link>https://djharper.dev/post/2018/03/29/using-hyperloglog-in-production-a-retrospective/</link>
      <pubDate>Thu, 29 Mar 2018 12:00:00 +0000</pubDate>
      
      <guid>https://djharper.dev/post/2018/03/29/using-hyperloglog-in-production-a-retrospective/</guid>
      <description>A few years ago I was involved in a project that required us to provide a time series metric on how many concurrent users were using our products, and what quality of service they were receiving.
On embarking on this journey, it quickly became apparent that the tricky part would be doing the count of unique concurrent users, over a set of dimensions in one minute windows. We&amp;rsquo;d run into the classic count-distinct problem.</description>
    </item>
    
    <item>
      <title>Running Go AWS Lambda functions locally</title>
      <link>https://djharper.dev/post/2018/01/27/running-go-aws-lambda-functions-locally/</link>
      <pubDate>Sat, 27 Jan 2018 12:00:00 +0000</pubDate>
      
      <guid>https://djharper.dev/post/2018/01/27/running-go-aws-lambda-functions-locally/</guid>
      <description>AWS recently announced Go support for Lambda, giving developers more choice over how their functions are written.
In an attempt to kick the tires of the new runtime, I found myself rummaging around the open source library required when writing Lambda functions in Go, and was delighted to find a glimpse into what happens when your function is invoked. This post is a brief tour of what I’ve gathered, and describes a simple way of invoking your function in a local environment.</description>
    </item>
    
  </channel>
</rss>