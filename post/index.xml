<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on djhworld</title>
    <link>https://djhworld.github.io/post/</link>
    <description>Recent content in Posts on djhworld</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 21 Sep 2018 09:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://djhworld.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>I ported my Gameboy Color emulator to WebAssembly</title>
      <link>https://djhworld.github.io/post/2018/09/21/i-ported-my-gameboy-color-emulator-to-webassembly/</link>
      <pubDate>Fri, 21 Sep 2018 09:00:00 +0000</pubDate>
      
      <guid>https://djhworld.github.io/post/2018/09/21/i-ported-my-gameboy-color-emulator-to-webassembly/</guid>
      <description>Around five years ago I wrote a Gameboy Color emulator in Go. It was a very frustrating, but rewarding experience that I&amp;rsquo;ve been dining out on in job interviews ever since.
However, as the passage of time progressed, it landed on the pile of mostly-done-but-not-finished projects and left largely abandoned. One might generously say, on hiatus. Well, until very recently that is.
  That 5 year gap   You see, a few weeks ago Go 1.</description>
    </item>
    
    <item>
      <title>I thought I found a browser security bug</title>
      <link>https://djhworld.github.io/post/2018/08/12/i-thought-i-found-a-browser-security-bug/</link>
      <pubDate>Sun, 12 Aug 2018 09:00:00 +0000</pubDate>
      
      <guid>https://djhworld.github.io/post/2018/08/12/i-thought-i-found-a-browser-security-bug/</guid>
      <description>A few weeks ago I thought I&amp;rsquo;d stumbled across something really bad when just casually browsing the web. It all started on a financial information website, upon clicking a link, the page partially loaded some of its content, then, without warning, redirected the browser to a completely different domain with some weird spam/search engine content on it, from a known domain squatter.
Strange&amp;hellip;
After refreshing a few times, it was still doing it.</description>
    </item>
    
    <item>
      <title>Using HyperLogLog in production, a retrospective</title>
      <link>https://djhworld.github.io/post/2018/03/29/using-hyperloglog-in-production-a-retrospective/</link>
      <pubDate>Thu, 29 Mar 2018 12:00:00 +0000</pubDate>
      
      <guid>https://djhworld.github.io/post/2018/03/29/using-hyperloglog-in-production-a-retrospective/</guid>
      <description>A few years ago I was involved in a project that required us to provide a time series metric on how many concurrent users were using our products, and what quality of service they were receiving.
On embarking on this journey, it quickly became apparent that the tricky part would be doing the count of unique concurrent users, over a set of dimensions in one minute windows. We&amp;rsquo;d run into the classic count-distinct problem.</description>
    </item>
    
    <item>
      <title>Running Go AWS Lambda functions locally</title>
      <link>https://djhworld.github.io/post/2018/01/27/running-go-aws-lambda-functions-locally/</link>
      <pubDate>Sat, 27 Jan 2018 12:00:00 +0000</pubDate>
      
      <guid>https://djhworld.github.io/post/2018/01/27/running-go-aws-lambda-functions-locally/</guid>
      <description>AWS recently announced Go support for Lambda, giving developers more choice over how their functions are written.
In an attempt to kick the tires of the new runtime, I found myself rummaging around the open source library required when writing Lambda functions in Go, and was delighted to find a glimpse into what happens when your function is invoked. This post is a brief tour of what I’ve gathered, and describes a simple way of invoking your function in a local environment.</description>
    </item>
    
  </channel>
</rss>